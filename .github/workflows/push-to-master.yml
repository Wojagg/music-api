name: provisioning-and-deployment
run-name: run terraform provisioning, build and push docker containers to ECR and deploy on ec2

on:
  push:
    branches:
      - master

jobs:
  provisioning:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_AWS_REGION: ${{ secrets.TF_VAR_AWS_REGION }}
      TF_VAR_S3_NAME: ${{ secrets.TF_VAR_S3_NAME }}

    steps:
      - uses: actions/checkout@v4

      - name: setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8
          terraform_wrapper: false

      - name: terraform format
        id: fmt
        run: terraform fmt -check

      - name: terraform init
        id: init
        run: terraform init -backend-config="bucket=$TF_VAR_S3_NAME" -backend-config="region=$TF_VAR_AWS_REGION"

      - name: terraform plan
        id: plan
        run: terraform plan -no-color

      - name: terraform apply
        id: apply
        run: terraform apply -auto-approve

  build-docker-image-and-upload-to-ECR:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.TF_VAR_AWS_REGION }}

      - name: login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: build, tag, and push the service image to ECR
        id: build-and-push-service-image
        env:
          ECR_REGISTRY_NAME: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO_NAME: ${{ secrets.ECR_REPO_NAME_SERVICE }}
        run: |
          docker build -f music-service.Dockerfile -t $ECR_REGISTRY_NAME/$ECR_REPO_NAME:latest .
          docker push $ECR_REGISTRY_NAME/$ECR_REPO_NAME:latest

      - name: build, tag, and push the auth image to ECR
        id: build-and-push-auth-image
        env:
          ECR_REGISTRY_NAME: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO_NAME: ${{ secrets.ECR_REPO_NAME_AUTH }}
        run: |
          docker build -f music-auth.Dockerfile -t $ECR_REGISTRY_NAME/$ECR_REPO_NAME:latest .
          docker push $ECR_REGISTRY_NAME/$ECR_REPO_NAME:latest

      - name: build, tag, and push the redis image to ECR
        id: build-and-push-redis-image
        env:
          ECR_REGISTRY_NAME: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO_NAME: ${{ secrets.ECR_REPO_NAME_REDIS }}
        run: |
          docker build -f redis.Dockerfile -t $ECR_REGISTRY_NAME/$ECR_REPO_NAME:latest .
          docker push $ECR_REGISTRY_NAME/$ECR_REPO_NAME:latest

  run-docker-compose-on-ec2:
    needs:
      - build-docker-image-and-upload-to-ECR
      - provisioning
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.TF_VAR_AWS_REGION }}

      - name: login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: create env file
        run: |
          touch .env
          echo CACHE_PASS=${{ secrets.CACHE_PASS }} >> .env
          echo CACHE_USER=${{ secrets.CACHE_USER }} >> .env
          echo CACHE_PORT=${{ secrets.CACHE_PORT }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_USERNAME=${{ secrets.DB_USERNAME }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo AUTH_DB_NAME=${{ secrets.AUTH_DB_NAME }} >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo PASS_HASH=${{ secrets.PASS_HASH }} >> .env
          echo AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }} >> .env
          echo TF_VAR_AWS_REGION=${{ secrets.TF_VAR_AWS_REGION }} >> .env
          echo ECR_REPO_NAME_AUTH=${{ secrets.ECR_REPO_NAME_AUTH }} >> .env
          echo ECR_REPO_NAME_SERVICE=${{ secrets.ECR_REPO_NAME_SERVICE }} >> .env
          echo ECR_REPO_NAME_REDIS=${{ secrets.ECR_REPO_NAME_REDIS }} >> .env

      - name: copy docker compose and .env files to the server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.AWS_PEM_KEY }}
          source: "docker-compose.prod.yml,.env"
          target: "~/"

      - name: run docker-compose on the server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.AWS_PEM_KEY }}
          script: sudo docker-compose -f docker-compose.prod.yml up
